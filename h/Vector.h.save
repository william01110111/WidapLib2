
///this file contains declarations and implementation of 2D and 3D vectors

#pragma once

#include <math.h>

namespace widap
{

template<typename T>
class V //vector base class
{
public:
	virtual double dst()=0;
};

template<typename T>
class V2 : public V<T> //vector 2D
{
public:
	T x, y;
	
	//default constructor
	V2()
	{
		x=0;
		y=0;
	}
	
	//constructor with values
	V2(T xIn, T yIn)
	{
		x=xIn;
		y=yIn;
	}
	
	//distance from the origin to this point
	double dst()
	{
		return sqrt(x*x+y*y);
	}
	
	//distance to another point
	double dst(V2<T> in)
	{
		return sqrt((x-in.x)*(x-in.x)+(y-in.y)*(y-in.y));
	}
};
typedef V2<int> V2i;
typedef V2<double> V2d;

}


